{"ast":null,"code":"import _asyncToGenerator from \"/root/projects/fullstack-boilerplate-nestjs-angular/app-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TransactionsService {\n  constructor(httpClient) {\n    this.transactions = [{\n      account_id: 1232143123,\n      amount: -500,\n      balance: 12000\n    }, {\n      account_id: 1232342123,\n      amount: 130,\n      balance: 30400\n    }, {\n      account_id: 121236123,\n      amount: -7345,\n      balance: 23100\n    }];\n    this.allTransactions = [];\n    this.myData = {\n      account_id: '0afd02d3-6c59-46e7-b7bc-893c5e0b7ac2',\n      amount: 7\n    };\n    this.httpClient = httpClient;\n  }\n\n  getAllTransactions() {\n    var _this = this;\n\n    this.httpClient.get(environment.TRANSACTION_API).subscribe(data => {\n      data.forEach( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (obj) {\n          const balance = yield _this.fetchBalance(Object.values(obj)[1]);\n\n          _this.addTransaction(Object.values(obj)[1], Object.values(obj)[2], balance);\n        });\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    });\n  } // Posting new transaction\n\n\n  postTransaction(account_id, amount) {\n    this.httpClient.post(environment.TRANSACTION_API, {\n      account_id,\n      amount\n    }).subscribe(data => {\n      console.log(data);\n    });\n  } // Fetching the balance\n\n\n  fetchBalance(account_id) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const response = yield _this2.httpClient.get(`${environment.GET_BALANCE_API}${account_id}`).toPromise();\n\n        const balance = _this2.getValue(Object.assign({}, response))('balance');\n\n        return balance;\n      } catch (error) {\n        // handle error\n        return 0;\n      }\n    })();\n  }\n\n  getValue(obj) {\n    return key => obj[key];\n  } // Filtering the type of the transaction\n\n\n  getTransactions() {\n    return this.transactions.filter(trans => {\n      return trans['amount'] > 0;\n    });\n  }\n\n  getTransactionsWithdraw() {\n    return this.transactions.filter(trans => {\n      return trans['amount'] < 0;\n    });\n  } // Adding the new transaction on the top of the list\n\n\n  addTransaction(account_id, amount, balance) {\n    const newTrans = {\n      account_id: account_id,\n      amount: amount,\n      balance: balance\n    };\n    this.transactions.splice(0, 0, newTrans);\n  }\n\n}\n\nTransactionsService.ɵfac = function TransactionsService_Factory(t) {\n  return new (t || TransactionsService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nTransactionsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TransactionsService,\n  factory: TransactionsService.ɵfac\n});","map":{"version":3,"mappings":"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","names":["environment","TransactionsService","constructor","httpClient","account_id","amount","balance","getAllTransactions","get","TRANSACTION_API","subscribe","data","forEach","obj","fetchBalance","Object","values","addTransaction","postTransaction","post","console","log","response","GET_BALANCE_API","toPromise","getValue","error","key","getTransactions","transactions","filter","trans","getTransactionsWithdraw","newTrans","splice","i0","factory"],"sourceRoot":"","sources":["/root/projects/fullstack-boilerplate-nestjs-angular/app-frontend/src/app/transactions.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable()\nexport class TransactionsService {\n  transactions = [\n    { account_id: 1232143123, amount: -500, balance: 12000 },\n    { account_id: 1232342123, amount: 130, balance: 30400 },\n    { account_id: 121236123, amount: -7345, balance: 23100 },\n  ];\n  allTransactions = [];\n  httpClient: HttpClient;\n  myData = {\n    account_id: '0afd02d3-6c59-46e7-b7bc-893c5e0b7ac2',\n    amount: 7,\n  };\n\n  constructor(httpClient: HttpClient) {\n    this.httpClient = httpClient;\n  }\n\n  getAllTransactions() {\n    this.httpClient\n      .get<Array<object>>(environment.TRANSACTION_API)\n      .subscribe((data) => {\n        data.forEach(async (obj) => {\n          const balance = await this.fetchBalance(Object.values(obj)[1]);\n          this.addTransaction(\n            Object.values(obj)[1],\n            Object.values(obj)[2],\n            balance!\n          );\n        });\n      });\n  }\n\n  // Posting new transaction\n  postTransaction(account_id: number, amount: number) {\n    this.httpClient\n      .post(environment.TRANSACTION_API, { account_id, amount })\n      .subscribe((data) => {\n        console.log(data);\n      });\n  }\n\n  // Fetching the balance\n  async fetchBalance(account_id: string): Promise<number | undefined> {\n    try {\n      const response = await this.httpClient\n        .get<object>(`${environment.GET_BALANCE_API}${account_id}`)\n        .toPromise();\n      const balance = this.getValue({ ...response })('balance');\n      return balance;\n    } catch (error) {\n      // handle error\n      return 0;\n    }\n  }\n  getValue(obj: { [key: string]: number }) {\n    return (key: string): number => obj[key];\n  }\n  // Filtering the type of the transaction\n  getTransactions() {\n    return this.transactions.filter((trans) => {\n      return trans['amount'] > 0;\n    });\n  }\n  getTransactionsWithdraw() {\n    return this.transactions.filter((trans) => {\n      return trans['amount'] < 0;\n    });\n  }\n\n  // Adding the new transaction on the top of the list\n  addTransaction(account_id: number, amount: number, balance: number) {\n    const newTrans = {\n      account_id: account_id,\n      amount: amount,\n      balance: balance,\n    };\n    this.transactions.splice(0, 0, newTrans);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}