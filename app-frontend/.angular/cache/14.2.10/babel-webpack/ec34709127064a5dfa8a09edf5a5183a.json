{"ast":null,"code":"import _asyncToGenerator from \"/root/projects/fullstack-boilerplate-nestjs-angular/app-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TransactionsService {\n  constructor(httpClient) {\n    this.transactions = [{\n      account_id: 1232143123,\n      amount: -500,\n      balance: 12000\n    }, {\n      account_id: 1232342123,\n      amount: 130,\n      balance: 30400\n    }, {\n      account_id: 121236123,\n      amount: -7345,\n      balance: 23100\n    }];\n    this.allTransactions = [];\n    this.myData = {\n      account_id: '0afd02d3-6c59-46e7-b7bc-893c5e0b7ac2',\n      amount: 7\n    };\n    this.httpClient = httpClient;\n  }\n\n  getAllTransactions() {}\n\n  postTransaction(account_id, amount) {}\n\n  fetchBalance(account_id) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const response = yield _this.httpClient.get(`${environment.GET_BALANCE_API}${account_id}`).toPromise();\n\n        const balance = _this.getValue(Object.assign({}, response))('balance');\n\n        return balance;\n      } catch (error) {\n        // handle error\n        return 0;\n      }\n    })();\n  }\n\n  getValue(obj) {\n    return key => obj[key];\n  } // Filtering the type of the transaction\n\n\n  getTransactions() {\n    return this.transactions.filter(trans => {\n      return trans['amount'] > 0;\n    });\n  }\n\n  getTransactionsWithdraw() {\n    return this.transactions.filter(trans => {\n      return trans['amount'] < 0;\n    });\n  }\n\n  addTransaction(account_id, amount, balance) {}\n\n}\n\nTransactionsService.ɵfac = function TransactionsService_Factory(t) {\n  return new (t || TransactionsService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nTransactionsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TransactionsService,\n  factory: TransactionsService.ɵfac\n});","map":{"version":3,"mappings":";AACA,SAASA,WAAT,QAA4B,8BAA5B;;;AAIA,OAAM,MAAOC,mBAAP,CAA0B;EAa9BC,YAAYC,UAAZ,EAAkC;IAZlC,oBAAe,CACb;MAAEC,UAAU,EAAE,UAAd;MAA0BC,MAAM,EAAE,CAAC,GAAnC;MAAwCC,OAAO,EAAE;IAAjD,CADa,EAEb;MAAEF,UAAU,EAAE,UAAd;MAA0BC,MAAM,EAAE,GAAlC;MAAuCC,OAAO,EAAE;IAAhD,CAFa,EAGb;MAAEF,UAAU,EAAE,SAAd;MAAyBC,MAAM,EAAE,CAAC,IAAlC;MAAwCC,OAAO,EAAE;IAAjD,CAHa,CAAf;IAKA,uBAAkB,EAAlB;IAEA,cAAS;MACPF,UAAU,EAAE,sCADL;MAEPC,MAAM,EAAE;IAFD,CAAT;IAME,KAAKF,UAAL,GAAkBA,UAAlB;EACD;;EAEDI,kBAAkB,IAAK;;EACvBC,eAAe,CAACJ,UAAD,EAAqBC,MAArB,EAAmC,CAAI;;EAChDI,YAAY,CAACL,UAAD,EAAmB;IAAA;;IAAA;MACnC,IAAI;QACF,MAAMM,QAAQ,SAAS,KAAI,CAACP,UAAL,CACpBQ,GADoB,CACR,GAAGX,WAAW,CAACY,eAAe,GAAGR,UAAU,EADnC,EAEpBS,SAFoB,EAAvB;;QAGA,MAAMP,OAAO,GAAG,KAAI,CAACQ,QAAL,CAAaC,kBAAML,QAAN,CAAb,EAA+B,SAA/B,CAAhB;;QACA,OAAOJ,OAAP;MACD,CAND,CAME,OAAOU,KAAP,EAAc;QACd;QACA,OAAO,CAAP;MACD;IAVkC;EAWpC;;EACDF,QAAQ,CAACG,GAAD,EAA+B;IACrC,OAAQC,GAAD,IAAyBD,GAAG,CAACC,GAAD,CAAnC;EACD,CAjC6B,CAkC9B;;;EACAC,eAAe;IACb,OAAO,KAAKC,YAAL,CAAkBC,MAAlB,CAA0BC,KAAD,IAAU;MACxC,OAAOA,KAAK,CAAC,QAAD,CAAL,GAAkB,CAAzB;IACD,CAFM,CAAP;EAGD;;EACDC,uBAAuB;IACrB,OAAO,KAAKH,YAAL,CAAkBC,MAAlB,CAA0BC,KAAD,IAAU;MACxC,OAAOA,KAAK,CAAC,QAAD,CAAL,GAAkB,CAAzB;IACD,CAFM,CAAP;EAGD;;EACDE,cAAc,CAACpB,UAAD,EAAqBC,MAArB,EAAqCC,OAArC,EAAoD,CAAI;;AA7CxC;;;mBAAnBL,qBAAmBwB;AAAA;;;SAAnBxB;EAAmByB,SAAnBzB,mBAAmB","names":["environment","TransactionsService","constructor","httpClient","account_id","amount","balance","getAllTransactions","postTransaction","fetchBalance","response","get","GET_BALANCE_API","toPromise","getValue","Object","error","obj","key","getTransactions","transactions","filter","trans","getTransactionsWithdraw","addTransaction","i0","factory"],"sourceRoot":"","sources":["/root/projects/fullstack-boilerplate-nestjs-angular/app-frontend/src/app/transactions.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable()\nexport class TransactionsService {\n  transactions = [\n    { account_id: 1232143123, amount: -500, balance: 12000 },\n    { account_id: 1232342123, amount: 130, balance: 30400 },\n    { account_id: 121236123, amount: -7345, balance: 23100 },\n  ];\n  allTransactions = [];\n  httpClient: HttpClient;\n  myData = {\n    account_id: '0afd02d3-6c59-46e7-b7bc-893c5e0b7ac2',\n    amount: 7,\n  };\n\n  constructor(httpClient: HttpClient) {\n    this.httpClient = httpClient;\n  }\n\n  getAllTransactions() {}\n  postTransaction(account_id: number, amount: number) {}\n  async fetchBalance(account_id: string): Promise<number | undefined> {\n    try {\n      const response = await this.httpClient\n        .get<object>(`${environment.GET_BALANCE_API}${account_id}`)\n        .toPromise();\n      const balance = this.getValue({ ...response })('balance');\n      return balance;\n    } catch (error) {\n      // handle error\n      return 0;\n    }\n  }\n  getValue(obj: { [key: string]: number }) {\n    return (key: string): number => obj[key];\n  }\n  // Filtering the type of the transaction\n  getTransactions() {\n    return this.transactions.filter((trans) => {\n      return trans['amount'] > 0;\n    });\n  }\n  getTransactionsWithdraw() {\n    return this.transactions.filter((trans) => {\n      return trans['amount'] < 0;\n    });\n  }\n  addTransaction(account_id: number, amount: number, balance: number) {}\n}\n"]},"metadata":{},"sourceType":"module"}